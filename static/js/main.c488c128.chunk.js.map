{"version":3,"sources":["components/modal/modal.module.css","components/modal/modal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","modal","props","showHideClassName","show","styles","display","hide","location","eventInfo","event","extendedProps","description","locationDiv","href","className","concat","modalMain","title","modalDescription","dangerouslySetInnerHTML","__html","onClick","handleClose","defaultProps","App","calendarRef","React","createRef","handleResize","e","setState","windowWidth","window","innerWidth","showModal","console","log","state","hideModal","chosenEvent","addEventListener","this","info","initView","ref","plugins","dayGridPlugin","interactionPlugin","googleCalendarPlugin","listPlugin","googleCalendarApiKey","events","googleCalendarId","height","initialView","eventClick","jsEvent","preventDefault","selectEvent","windowResize","current","getApi","changeView","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gKACAA,EAAOC,QAAU,CAAC,QAAU,uBAAuB,KAAO,oBAAoB,MAAQ,qBAAqB,UAAY,yBAAyB,iBAAmB,kC,mMCG7JC,EAAQ,SAACC,GAAW,IAAD,gBACnBC,EAAoBD,EAAME,KAAOC,IAAOC,QAAUD,IAAOE,KACzDC,EAAQ,UAAGN,EAAMO,iBAAT,iBAAG,EAAiBC,aAApB,iBAAG,EAAwBC,qBAA3B,aAAG,EAAuCH,SAClDI,GAAc,UAAAV,EAAMO,iBAAN,mBAAiBC,aAAjB,mBAAwBC,qBAAxB,eAAuCC,cAAe,2BACpEC,EAAc,KAKlB,OAHIL,IACFK,EAAc,6BAAK,uBAAGC,KAAON,GAAV,YAAiC,+BAGpD,yBAAKO,UAAWV,IAAOJ,MAAMe,OAAO,IAAKb,IACvC,6BAASY,UAAWV,IAAOY,WACzB,6BAAM,UAAAf,EAAMO,iBAAN,mBAAiBC,aAAjB,eAAwBQ,QAAS,YACvC,yBAAKH,UAAWV,IAAOc,iBACvBC,wBACC,CAACC,OAAQT,KACV,6BACCC,EACD,4BAAQS,QAASpB,EAAMqB,aAAvB,YAMRtB,EAAMuB,aAAe,CACnBf,UAAW,KACXL,MAAM,GAGOH,QCrBMwB,E,kDASnB,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IATRwB,YAAcC,IAAMC,YAQD,EAPnBhB,YAAc,KAOK,EANnBiB,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,YAAaC,OAAOC,cAIL,EAUnBC,UAAY,WACV,EAAKJ,SAAS,CAAEI,WAAW,IAC3BC,QAAQC,IAAI,EAAKC,MAAMH,YAZN,EAenBI,UAAY,WACV,EAAKR,SAAS,CAAEI,WAAW,IAC3BC,QAAQC,IAAI,EAAKC,MAAMH,YAfvB,EAAKG,MAAQ,CACXN,YAAaC,OAAOC,WACpBtB,YAAa,KACb4B,YAAa,KACbL,WAAW,GANI,E,gEAqBjBF,OAAOQ,iBAAiB,SAAUC,KAAKb,gB,6CAIvCI,OAAOQ,iBAAiB,SAAUC,KAAKb,gB,kCAG7Bc,GACVD,KAAKX,SAAS,CACZS,YAAaG,EACb/B,YAAa+B,EAAKjC,MAAMC,cAAcC,cAExC8B,KAAKP,c,+BAGG,IAAD,OACCH,EAAgBU,KAAKJ,MAArBN,YACFY,EAAYZ,GAAe,IAAO,eAAiB,WAEzD,OACE,yBAAKjB,UAAU,qBACb,kBAAC,IAAD,CACE8B,IAAKH,KAAKhB,YACVoB,QAAS,CAAEC,IAAeC,IAAmBC,IAAsBC,KACnEC,qBAzDK,0CA0DLC,OAAQ,CAACC,iBAzDJ,wDA0DLC,OAAO,OACPC,YAAaX,EACbY,WAAY,SAACb,GACXA,EAAKc,QAAQC,iBACb,EAAKC,YAAYhB,IAEnBiB,aAAc,WACR5B,GAAe,IACjB,EAAKN,YAAYmC,QAAQC,SAASC,WAAW,gBAE7C,EAAKrC,YAAYmC,QAAQC,SAASC,WAAW,eAInD,kBAAC,EAAD,CACE3D,KAAMsC,KAAKJ,MAAMH,UACjBZ,YAAamB,KAAKH,UAClB9B,UAAWiC,KAAKJ,MAAME,mB,GAzECb,IAAMqC,WCAnBC,QACW,cAA7BhC,OAAOzB,SAAS0D,UAEe,UAA7BjC,OAAOzB,SAAS0D,UAEhBjC,OAAOzB,SAAS0D,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.c488c128.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"modal_display__2ZMCu\",\"hide\":\"modal_hide__7aQNV\",\"modal\":\"modal_modal__1DF1f\",\"modalMain\":\"modal_modalMain__2jHDB\",\"modalDescription\":\"modal_modalDescription__1NgK3\"};","import React from 'react';\nimport styles from './modal.module.css';\n\n// date and time ...\nconst modal = (props) => {\n  let showHideClassName = props.show ? styles.display : styles.hide;\n  let location = props.eventInfo?.event?.extendedProps?.location;\n  let description = props.eventInfo?.event?.extendedProps?.description || 'No Description Available';\n  let locationDiv = null;\n\n  if (location) {\n    locationDiv = <div><a href={ location }>Location</a><br/></div>\n  }\n  return (\n    <div className={styles.modal.concat(\" \", showHideClassName)} >\n      <section className={styles.modalMain}>\n        <h1>{ props.eventInfo?.event?.title || 'No title'}</h1>\n        <div className={styles.modalDescription}\n        dangerouslySetInnerHTML=\n        {{__html: description}}/>\n        <br/>\n        {locationDiv}\n        <button onClick={props.handleClose}>close</button>\n      </section>\n    </div>\n  )\n};\n\nmodal.defaultProps = {\n  eventInfo: null,\n  show: false\n};\n\nexport default modal;\n","import React from 'react';\nimport FullCalendar from '@fullcalendar/react'\nimport './App.css';\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport listPlugin from '@fullcalendar/list'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport googleCalendarPlugin from '@fullcalendar/google-calendar'\nimport Modal from './components/modal/modal';\n\nconst apiKey = \"AIzaSyBIwJdxiiUocK4yJLF6qLWxkc44-_7tf_0\";\nconst gCalId = \"cns2ghia12k0nhtqgr6sn50aic@group.calendar.google.com\";\n\nexport default class App extends React.Component {\n  calendarRef = React.createRef();\n  description = null;\n  handleResize = (e) => {\n    this.setState({\n      windowWidth: window.innerWidth\n    });\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      windowWidth: window.innerWidth,\n      description: null,\n      chosenEvent: null,\n      showModal: false\n    };\n  }\n\n  showModal = () => {\n    this.setState({ showModal: true });\n    console.log(this.state.showModal);\n  };\n\n  hideModal = () => {\n    this.setState({ showModal: false });\n    console.log(this.state.showModal);\n  };\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  selectEvent(info) {\n    this.setState({\n      chosenEvent: info,\n      description: info.event.extendedProps.description\n    });\n    this.showModal();\n  }\n\n  render() {\n    const { windowWidth } = this.state;\n    const initView = (windowWidth >= 768) ? 'dayGridMonth' : 'listWeek';\n\n    return (\n      <div className='calendarContainer'>\n        <FullCalendar\n          ref={this.calendarRef}\n          plugins={[ dayGridPlugin, interactionPlugin, googleCalendarPlugin, listPlugin ]}\n          googleCalendarApiKey={apiKey}\n          events={{googleCalendarId: gCalId}}\n          height=\"auto\"\n          initialView={initView}\n          eventClick={(info) => {\n            info.jsEvent.preventDefault()\n            this.selectEvent(info)\n          }}\n          windowResize={() => {\n            if (windowWidth >= 768) {\n              this.calendarRef.current.getApi().changeView('dayGridMonth');\n            } else {\n              this.calendarRef.current.getApi().changeView('listWeek');\n            }\n          }}\n        />\n        <Modal\n          show={this.state.showModal}\n          handleClose={this.hideModal}\n          eventInfo={this.state.chosenEvent}/>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}